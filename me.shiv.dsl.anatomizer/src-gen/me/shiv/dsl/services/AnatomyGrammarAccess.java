/*
* generated by Xtext
*/
package me.shiv.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AnatomyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartpaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cShipmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShipmentsShipmentParserRuleCall_1_0 = (RuleCall)cShipmentsAssignment_1.eContents().get(0);
		private final Keyword cEndpaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Model:
		//	"@startpa" shipments+=Shipment+ "@endpa";
		public ParserRule getRule() { return rule; }

		//"@startpa" shipments+=Shipment+ "@endpa"
		public Group getGroup() { return cGroup; }

		//"@startpa"
		public Keyword getStartpaKeyword_0() { return cStartpaKeyword_0; }

		//shipments+=Shipment+
		public Assignment getShipmentsAssignment_1() { return cShipmentsAssignment_1; }

		//Shipment
		public RuleCall getShipmentsShipmentParserRuleCall_1_0() { return cShipmentsShipmentParserRuleCall_1_0; }

		//"@endpa"
		public Keyword getEndpaKeyword_2() { return cEndpaKeyword_2; }
	}

	public class ShipmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Shipment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShipmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWorkPackagesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWorkPackagesWorkPackageParserRuleCall_3_0 = (RuleCall)cWorkPackagesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Shipment:
		//	"shipment" name=ID "{" workPackages+=WorkPackage+ "}";
		public ParserRule getRule() { return rule; }

		//"shipment" name=ID "{" workPackages+=WorkPackage+ "}"
		public Group getGroup() { return cGroup; }

		//"shipment"
		public Keyword getShipmentKeyword_0() { return cShipmentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//workPackages+=WorkPackage+
		public Assignment getWorkPackagesAssignment_3() { return cWorkPackagesAssignment_3; }

		//WorkPackage
		public RuleCall getWorkPackagesWorkPackageParserRuleCall_3_0() { return cWorkPackagesWorkPackageParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class WorkPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDepAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDepIDTerminalRuleCall_4_1_0 = (RuleCall)cDepAssignment_4_1.eContents().get(0);
		
		//WorkPackage:
		//	"wp" name=ID "," desc=STRING ("->" dep=ID)?;
		public ParserRule getRule() { return rule; }

		//"wp" name=ID "," desc=STRING ("->" dep=ID)?
		public Group getGroup() { return cGroup; }

		//"wp"
		public Keyword getWpKeyword_0() { return cWpKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//desc=STRING
		public Assignment getDescAssignment_3() { return cDescAssignment_3; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_3_0() { return cDescSTRINGTerminalRuleCall_3_0; }

		//("->" dep=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0() { return cHyphenMinusGreaterThanSignKeyword_4_0; }

		//dep=ID
		public Assignment getDepAssignment_4_1() { return cDepAssignment_4_1; }

		//ID
		public RuleCall getDepIDTerminalRuleCall_4_1_0() { return cDepIDTerminalRuleCall_4_1_0; }
	}
	
	
	private ModelElements pModel;
	private ShipmentElements pShipment;
	private WorkPackageElements pWorkPackage;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AnatomyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("me.shiv.dsl.Anatomy".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"@startpa" shipments+=Shipment+ "@endpa";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Shipment:
	//	"shipment" name=ID "{" workPackages+=WorkPackage+ "}";
	public ShipmentElements getShipmentAccess() {
		return (pShipment != null) ? pShipment : (pShipment = new ShipmentElements());
	}
	
	public ParserRule getShipmentRule() {
		return getShipmentAccess().getRule();
	}

	//WorkPackage:
	//	"wp" name=ID "," desc=STRING ("->" dep=ID)?;
	public WorkPackageElements getWorkPackageAccess() {
		return (pWorkPackage != null) ? pWorkPackage : (pWorkPackage = new WorkPackageElements());
	}
	
	public ParserRule getWorkPackageRule() {
		return getWorkPackageAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
